{"version":3,"sources":["actions/Types.js","utils.js","actions/UserActions.js","components/Todo.js","components/Post.js","components/TodosAndPosts.js","components/User.js","components/UsersList.js","components/AddUser.js","components/Main.js","App.js","serviceWorker.js","redux/appReducer.js","redux/index.js","index.js"],"names":["usersUrl","tasksUrl","postsUrl","getUserTasks","id","a","axios","get","resp","todos","data","lastId","Math","max","map","todo","userTodos","filter","x","userId","userTasks","getUserPosts","posts","post","userPosts","getUsers","updateUser","user","put","console","log","error","deleteUser","delete","addUser","newUser","addPost","newPost","addTodo","newTodo","fetchUsersSuccess","users","type","types","payload","fetchUsersFailure","addUserSuccess","addUserFailure","updateUserSuccess","updates","updateUserFailure","deleteUserSuccess","deleteUserFailure","dispatch","utils","then","res","catch","name","email","address","userData","Todo","props","markCompleted","setState","completed","state","task","title","completedButton","this","value","onClick","className","key","toString","Component","Post","body","TodosAndPosts","toggleTasksAndPosts","showTasksAndPosts","userBgColor","addTask","newTaskId","TasksLastId","newTask","selectedUserId","newTaskTitle","tasks","newPostId","postsLastId","newPostTitle","newPostBody","toggleAddTaskSection","toggleAddPostSection","setTaskTitle","e","target","setPostTitle","setPostBody","allTasksCompleted","showExtraDetails","some","respPosts","lastIdPosts","prevProps","postResp","onChange","connect","User","useDispatch","useState","setName","setEmail","setAddress","setUserTask","setUserPost","toggleAllTasksCompleted","toggleShowExtraDetails","useSelector","useEffect","extraDetails","useMemo","street","city","zipcode","userSelected","hasChange","bgColor","borderColor","to","UserActions","disabled","UserList","filterUsers","loading","filterString","toLowerCase","includes","length","AddUser","nextId","suite","Main","getData","fetchUsers","setFilter","htmlFor","UsersList","path","component","App","Boolean","window","location","hostname","match","INITIAL_STATE","mainReducer","action","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","appStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bb0fb660.chunk.js","sourcesContent":["const FETCH_USERS = \"FETCH_USERS\";\nconst FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\nconst FETCH_USERS_FAILURE = \"FETCH_USERS_FAILURE\";\n\nconst ADD_USER = \"ADD_USER\";\nconst ADD_USER_SUCCESS = \"ADD_USER_SUCCESS\";\nconst ADD_USER_FAILURE = \"ADD_USER_FAILURE\";\n\nconst UPDATE_USER = \"UPDATE_USER\";\nconst UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nconst UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\n\nconst DELETE_USER = \"DELETE_USER\";\nconst DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nconst DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\n\nconst SELECT_USER = \"SELECT_USER\";\n\nexport default {\n  FETCH_USERS,\n  FETCH_USERS_SUCCESS,\n  FETCH_USERS_FAILURE,\n  ADD_USER,\n  ADD_USER_SUCCESS,\n  ADD_USER_FAILURE,\n  UPDATE_USER,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAILURE,\n  DELETE_USER,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAILURE,\n  SELECT_USER,\n};\n","import axios from \"axios\";\nconst usersUrl = \"https://jsonplaceholder.typicode.com/users\";\nconst tasksUrl = \"https://jsonplaceholder.typicode.com/todos\";\nconst postsUrl = \"https://jsonplaceholder.typicode.com/posts\";\n\nconst getUsers = () => {\n  return axios.get(usersUrl);\n};\n\nconst getUserTasks = async (id) => {\n  const resp = await axios.get(tasksUrl);\n\n  const todos = resp.data;\n  const lastId = Math.max(...todos.map((todo) => todo.id));\n  const userTodos = todos.filter((x) => x.userId == id);\n  // let titles = userTodos.map(todo => todo.title);\n  // console.log(lastId);\n  return { userTasks: userTodos, lastId: lastId };\n};\n\nconst getUserPosts = async (id) => {\n  const resp = await axios.get(postsUrl);\n\n  const posts = resp.data;\n  const lastId = Math.max(...posts.map((post) => post.id));\n  const userPosts = posts.filter((x) => x.userId == id);\n\n  return { userPosts: userPosts, lastId: lastId };\n};\n\nconst updateUser = async (user) => {\n  try {\n    const resp = await axios.put(usersUrl + \"/\" + user.id, user);\n    console.log(resp);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst deleteUser = async (id) => {\n  await axios.delete(usersUrl + \"/\" + id);\n};\n\nconst addUser = (newUser) => {\n  return axios.post(usersUrl, newUser);\n};\n\nconst addPost = async (newPost) => {\n  try {\n    const resp = await axios.post(postsUrl, newPost);\n    console.log(resp);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst addTodo = async (newTodo) => {\n  try {\n    const resp = await axios.post(tasksUrl, newTodo);\n    console.log(resp);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport default {\n  getUsers,\n  getUserTasks,\n  updateUser,\n  deleteUser,\n  getUserPosts,\n  addUser,\n  addPost,\n  addTodo,\n};\n","import types from \"./Types\";\nimport utils from \"../utils\";\n\nconst fetchUsers = () => {\n  return (dispatch) => {\n    utils\n      .getUsers()\n      .then((res) => {\n        dispatch(fetchUsersSuccess(res.data));\n      })\n      .catch((error) => {\n        dispatch(fetchUsersFailure(error));\n      });\n    return dispatch({\n      type: types.FETCH_USERS,\n      payload: null,\n    });\n  };\n};\n\nconst fetchUsersSuccess = (users) => {\n  return {\n    type: types.FETCH_USERS_SUCCESS,\n    payload: users,\n  };\n};\n\nconst fetchUsersFailure = (error) => {\n  return {\n    type: types.FETCH_USERS_FAILURE,\n    payload: error,\n  };\n};\n\nconst addUser = (id, name, email, address) => {\n  const user = { id, name, email, address };\n  return (dispatch) => {\n    utils\n      .addUser(user)\n      .then(() => {\n        dispatch(addUserSuccess(user));\n      })\n      .catch((error) => {\n        dispatch(addUserFailure(error));\n      });\n    // setTimeout(() => dispatch(addUserSuccess(user)), 100);\n    return dispatch({\n      type: types.ADD_USER,\n      payload: null,\n    });\n  };\n};\n\nconst addUserSuccess = (user) => {\n  return {\n    type: types.ADD_USER_SUCCESS,\n    payload: user,\n  };\n};\n\nconst addUserFailure = (error) => {\n  return {\n    type: types.ADD_USER_FAILURE,\n    payload: error,\n  };\n};\n\nconst updateUser = (userData) => {\n  return (dispatch) => {\n    utils\n      .updateUser(userData)\n      .then(() => {\n        dispatch(updateUserSuccess(userData));\n      })\n      .catch((error) => {\n        dispatch(updateUserFailure(error));\n      });\n    return dispatch({\n      type: types.UPDATE_USER,\n      payload: null,\n    });\n  };\n};\n\nconst updateUserSuccess = (updates) => {\n  return {\n    type: types.UPDATE_USER_SUCCESS,\n    payload: updates,\n  };\n};\n\nconst updateUserFailure = (error) => {\n  return {\n    type: types.UPDATE_USER_FAILURE,\n    payload: error,\n  };\n};\n\nconst deleteUser = (userId) => {\n  return (dispatch) => {\n    utils\n      .deleteUser(userId)\n      .then(() => {\n        dispatch(deleteUserSuccess(userId));\n      })\n      .catch((error) => {\n        dispatch(deleteUserFailure(error));\n      });\n    return {\n      type: types.DELETE_USER,\n      payload: null,\n    };\n  };\n};\n\nconst deleteUserSuccess = (userId) => {\n  return {\n    type: types.DELETE_USER_SUCCESS,\n    payload: userId,\n  };\n};\n\nconst deleteUserFailure = (error) => {\n  return {\n    type: types.DELETE_USER_FAILURE,\n    payload: error,\n  };\n};\n\nconst selectUser = (userId) => {\n  return {\n    type: types.SELECT_USER,\n    payload: userId,\n  };\n};\n\nexport default { fetchUsers, addUser, updateUser, deleteUser, selectUser };\n","import React, { Component } from \"react\";\nimport \"./css/Todo.css\";\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      completed: this.props.task.completed,\n      id: this.props.task.id,\n      title: this.props.task.title,\n    };\n  }\n  markCompleted = () => {\n    this.setState({ completed: true });\n  };\n  render() {\n    let completedButton = \"\";\n    if (!this.state.completed)\n      completedButton = (\n        <div>\n          <input\n            type=\"button\"\n            value=\"Mark Completed\"\n            onClick={this.markCompleted}\n            className=\"btn btn-warning\"\n          />\n        </div>\n      );\n    return (\n      <div className=\"todo\" key={this.state.id}>\n        <div>\n          <div>\n            <span className=\"todoTitles\">Title : </span>\n            {this.state.title}\n          </div>\n          <div>\n            <span className=\"todoTitles\">Completed :</span>{\" \"}\n            {this.state.completed.toString()}\n          </div>\n        </div>\n        {completedButton}\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport \"./css/Post.css\";\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.post.id,\n      title: this.props.post.title,\n      body: this.props.post.body,\n    };\n  }\n\n  render() {\n    return (\n      <div key={this.state.id} className=\"post\">\n        <div>\n          <span className=\"postTitles\">Title : </span>\n          {this.state.title}\n        </div>\n        <div>\n          <span className=\"postTitles\">Body : </span>\n          {this.state.body}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport utils from \"../utils\";\nimport Todo from \"./Todo\";\nimport Post from \"./Post\";\nimport \"./css/TodosAndPosts.css\";\n\nclass TodosAndPosts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userTasks: [],\n      userPosts: [],\n      TasksLastId: -1,\n      newTaskTitle: \"\",\n      postsLastId: -1,\n      newPostTitle: \"\",\n      newPostBody: \"\",\n      allTasksCompleted: true,\n      showExtraDetails: false,\n      showTasksAndPosts: false,\n      userBgColor: false,\n      addTask: false,\n      addPost: false,\n    };\n  }\n\n  toggleTasksAndPosts = () => {\n    this.setState({\n      showTasksAndPosts: !this.state.showTasksAndPosts,\n      userBgColor: !this.state.userBgColor,\n    });\n  };\n  addTask = () => {\n    const newTaskId = this.state.TasksLastId + 1;\n    const newTask = {\n      completed: false,\n      userId: this.props.selectedUserId,\n      title: this.state.newTaskTitle,\n      id: newTaskId,\n    };\n    utils.addTodo(newTask);\n    const tasks = [...this.state.userTasks, newTask];\n    this.setState({\n      userTasks: tasks,\n      TasksLastId: newTaskId,\n    });\n  };\n\n  addPost = () => {\n    const newPostId = this.state.postsLastId + 1;\n\n    const newPost = {\n      userId: this.props.selectedUserId,\n      title: this.state.newPostTitle,\n      body: this.state.newPostBody,\n      id: newPostId,\n    };\n    utils.addPost(newPost);\n    const posts = [...this.state.userPosts, newPost];\n    this.setState({\n      userPosts: posts,\n      postsLastId: newPostId,\n    });\n  };\n\n  toggleAddTaskSection = () => {\n    this.setState({ addTask: !this.state.addTask });\n  };\n  toggleAddPostSection = () => {\n    this.setState({ addPost: !this.state.addPost });\n  };\n  setTaskTitle = (e) => {\n    this.setState({ newTaskTitle: e.target.value });\n  };\n  setPostTitle = (e) => {\n    this.setState({ newPostTitle: e.target.value });\n  };\n  setPostBody = (e) => {\n    this.setState({ newPostBody: e.target.value });\n  };\n  async componentDidMount() {\n    let userTasks;\n    let userPosts;\n    const resp = await utils.getUserTasks(this.props.selectedUserId);\n    userTasks = resp.userTasks;\n    const lastId = resp.lastId;\n    this.setState({ TasksLastId: lastId, userTasks: userTasks });\n    if (userTasks.some((task) => task.completed == false)) {\n      this.setState({ allTasksCompleted: false });\n    }\n    const respPosts = await utils.getUserPosts(this.props.selectedUserId);\n    userPosts = respPosts.userPosts;\n\n    const lastIdPosts = respPosts.lastId;\n    this.setState({ postsLastId: lastIdPosts, userPosts: userPosts });\n  }\n  async componentDidUpdate(prevProps) {\n    let userTasks;\n    let userPosts;\n    if (this.props.selectedUserId != prevProps.selectedUserId) {\n      const resp = await utils.getUserTasks(this.props.selectedUserId);\n      userTasks = resp.userTasks;\n      this.setState({ userTasks: userTasks });\n      if (userTasks.some((task) => task.completed == false)) {\n        this.setState({ allTasksCompleted: false });\n      }\n      const postResp = await utils.getUserPosts(this.props.selectedUserId);\n      userPosts = postResp.userPosts;\n      this.setState({ userPosts: userPosts });\n    }\n  }\n  render() {\n    let tasks;\n    let posts;\n    let addTask;\n    let addPost;\n    if (this.state.addTask) {\n      addTask = (\n        <div>\n          <div className=\"titles\">\n            New Todo - User {this.props.selectedUserId}\n          </div>\n          <div className=\"addContainer\">\n            <div>\n              <div>Title :</div>\n              <input type=\"text\" onChange={this.setTaskTitle} />\n            </div>\n            <div>\n              <input\n                type=\"button\"\n                value=\"Cancel\"\n                onClick={this.toggleAddTaskSection}\n                className=\"btn btn-warning\"\n              />\n              <input\n                type=\"button\"\n                value=\"Add\"\n                onClick={this.addTask}\n                className=\"btn btn-warning\"\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.selectedUserId && !this.state.addTask) {\n      tasks = (\n        <div>\n          <div className=\"titlesContainer\">\n            <span className=\"titles\">\n              Todos - User {this.props.selectedUserId}\n            </span>\n            <input\n              type=\"button\"\n              value=\"Add\"\n              onClick={this.toggleAddTaskSection}\n              className=\"btn btn-warning\"\n            />\n          </div>\n          <div className=\"todosAndPostsWrapper\">\n            {this.state.userTasks.map((task) => {\n              return <Todo task={task} key={task.id} />;\n            })}\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.addPost) {\n      addPost = (\n        <div>\n          <div>\n            <div className=\"titles\">\n              New Post - User {this.props.selectedUserId}\n            </div>\n            <div className=\"addContainer\">\n              <div>\n                <div>Title :</div>\n                <input type=\"text\" onChange={this.setPostTitle} />\n              </div>\n              <div>\n                <div>Body :</div>\n                <input type=\"text\" onChange={this.setPostBody} />\n              </div>\n              <div>\n                <input\n                  type=\"button\"\n                  value=\"Cancel\"\n                  onClick={this.toggleAddPostSection}\n                  className=\"btn btn-warning\"\n                />\n                <input\n                  type=\"button\"\n                  value=\"Add\"\n                  onClick={this.addPost}\n                  className=\"btn btn-warning\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.selectedUserId && !this.state.addPost) {\n      posts = (\n        <div className=\"postContainer\">\n          <div className=\"titlesContainer\">\n            <span className=\"titles\">\n              Posts - User {this.props.selectedUserId}\n            </span>\n            <input\n              type=\"button\"\n              value=\"Add\"\n              onClick={this.toggleAddPostSection}\n              className=\"btn btn-warning\"\n            />\n          </div>\n          <div className=\"todosAndPostsWrapper\">\n            {this.state.userPosts.map((post) => {\n              return <Post post={post} key={post.id} />;\n            })}\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"todosAndPosts\">\n        <div> {tasks}</div>\n        <div>{addTask}</div>\n        <div>{posts}</div>\n        <div>{addPost}</div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    data: state,\n    selectedUserId: state.selectedUserId,\n  };\n};\nexport default connect(mapStateToProps)(TodosAndPosts);\n","import React, { useMemo, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport UserActions from \"../actions/UserActions\";\nimport utils from \"../utils\";\nimport \"./css/User.css\";\n\nfunction User(props) {\n  const { userData } = props;\n\n  const dispatch = useDispatch();\n\n  const updateUser = () => {\n    const data = {\n      ...userData,\n      name,\n      email,\n      address,\n    };\n    dispatch(UserActions.updateUser(data));\n  };\n\n  const deleteUser = () => dispatch(UserActions.deleteUser(userData.id));\n  const selectUser = () => dispatch(UserActions.selectUser(userData.id));\n\n  const [name, setName] = useState(userData.name);\n  const [email, setEmail] = useState(userData.email);\n  const [address, setAddress] = useState(userData.address);\n  const [userTask, setUserTask] = useState([]);\n  const [userPosts, setUserPost] = useState([]);\n  const [allTasksCompleted, toggleAllTasksCompleted] = useState(true);\n  const [showExtraDetails, toggleShowExtraDetails] = useState(false);\n\n  const selectedUserId = useSelector((state) => state.selectedUserId);\n\n  useEffect(() => {\n    setName(userData.name);\n    setEmail(userData.email);\n    setAddress(userData.address);\n  }, [userData]);\n\n  useEffect(() => {\n    (async function () {\n      let resp = await utils.getUserTasks(userData.id);\n      setUserTask(resp.userTasks);\n      if (resp.userTasks.some((task) => task.completed === false)) {\n        toggleAllTasksCompleted(false);\n      }\n      resp = await utils.getUserPosts(userData.id);\n      setUserPost(resp);\n    })();\n  }, [userData.id]);\n\n  const extraDetails = useMemo(() => {\n    return showExtraDetails ? (\n      <div>\n        <div className=\"userInputs\">\n          <label>Street:</label>\n          <input\n            type=\"text\"\n            onChange={(e) => setAddress({ ...address, street: e.target.value })}\n            value={address.street}\n          />\n        </div>\n        <div className=\"userInputs\">\n          <label>City:</label>\n          <input\n            type=\"text\"\n            onChange={(e) => setAddress({ ...address, city: e.target.value })}\n            value={address.city}\n          />\n        </div>\n        <div>\n          <label>Zip Code:</label>\n          <input\n            type=\"text\"\n            onChange={(e) =>\n              setAddress({ ...address, zipcode: e.target.value })\n            }\n            value={address.zipcode}\n          />\n        </div>\n      </div>\n    ) : null;\n  }, [address, showExtraDetails]);\n\n  const userSelected = useMemo(() => userData.id === selectedUserId, [\n    selectedUserId,\n    userData.id,\n  ]);\n\n  const hasChange = useMemo(() => {\n    return userData.name !== name || userData.email !== email;\n  }, [userData.name, userData.email, name, email]);\n\n  const bgColor = useMemo(() => {\n    return userSelected ? \"orangeBg\" : \"\";\n  }, [userSelected]);\n  const borderColor = useMemo(\n    () => (allTasksCompleted ? \"greenBorder\" : \"redBorder\"),\n    [allTasksCompleted]\n  );\n\n  return (\n    <div className={`userDetails ${borderColor} ${bgColor}`}>\n      <div>\n        <Link to=\"/todosAndPosts\" onClick={selectUser}>\n          ID : {userData.id}\n        </Link>\n      </div>\n      <div className=\"userInputs\">\n        <label>Name :</label>\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n      <div>\n        <label>Email :</label>\n        <input\n          type=\"email\"\n          onChange={(e) => setEmail(e.target.value)}\n          value={email}\n        />\n      </div>\n      <div className=\"buttonsWrapper\">\n        <input\n          type=\"button\"\n          value=\"Other Data\"\n          onClick={() => toggleShowExtraDetails(!showExtraDetails)}\n          className=\"btn btn-light\"\n        />\n        <div>\n          <input\n            type=\"button\"\n            value=\"Update\"\n            disabled={!hasChange}\n            onClick={updateUser}\n            className=\"btn btn-warning\"\n          />{\" \"}\n          <input\n            type=\"button\"\n            value=\"Delete\"\n            onClick={deleteUser}\n            className=\"btn btn-warning\"\n          />\n        </div>\n      </div>\n\n      <div>{extraDetails}</div>\n    </div>\n  );\n}\n\nexport default User;\n","import React, { Component } from \"react\";\nimport User from \"./User\";\nimport { connect } from \"react-redux\";\n\nclass UserList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { filterUsers: [] };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { users, loading, filterString } = this.props;\n\n    if (filterString !== prevProps.filterString) {\n      const filterUsers = users.filter((user) =>\n        `${user.name} ${user.email}`.toLowerCase().includes(filterString)\n      );\n      this.setState({ filterUsers });\n    }\n    if (users.length !== prevProps.users.length) {\n      this.setState({ users, filterUsers: users });\n    }\n    if (!loading && prevProps.loading) {\n      this.setState({ filterUsers: users });\n    }\n  }\n\n  render() {\n    const { filterUsers } = this.state;\n    return (\n      <div>\n        <div>\n          {filterUsers.map((user) => (\n            <User key={`user-${user.id}`} userData={user} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { users, loading } = state;\n  return {\n    users,\n    loading,\n  };\n};\n\nexport default connect(mapStateToProps)(UserList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport UserActions from \"../actions/UserActions\";\n\nclass AddUser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      address: { street: \"\", suite: \"\", city: \"\", zipcode: \"\" },\n    };\n  }\n  componentDidUpdate(prevProps) {\n    const { loading, error } = this.props;\n    if (!loading && prevProps.loading && !error) {\n      this.setState({ name: \"\", email: \"\" });\n    }\n  }\n\n  addUser = () => {\n    const { nextId, addUser } = this.props;\n    const { name, email, address } = this.state;\n\n    addUser(nextId, name, email, address);\n  };\n\n  setName = (e) => {\n    this.setState({ name: e.target.value });\n  };\n  setEmail = (e) => {\n    this.setState({ email: e.target.value });\n  };\n  render() {\n    const { loading } = this.props;\n    const { name, email } = this.state;\n    return (\n      <div>\n        <div className=\"addTitle titles\">Add New User</div>\n        <div className=\"addContainer\">\n          <div>\n            <label>Name : </label>\n            <input value={name} type=\"text\" onChange={this.setName} />\n          </div>\n          <div>\n            <label>Email : </label>\n            <input value={email} type=\"email\" onChange={this.setEmail} />\n          </div>\n          <div>\n            <Link to=\"/\">\n              <input\n                type=\"button\"\n                value=\"Cancel\"\n                className=\"btn btn-warning\"\n                disabled={loading}\n              />\n            </Link>\n            <input\n              type=\"button\"\n              value=\"Add\"\n              onClick={this.addUser}\n              disabled={loading || !name || !email}\n              className=\"btn btn-warning\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addUser: (id, name, email, address) =>\n      dispatch(UserActions.addUser(id, name, email, address)),\n  };\n};\n\nconst mapStateToProps = (state) => {\n  const { nextId, loading, error } = state;\n  return {\n    nextId,\n    loading,\n    error,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport UserActions from \"../actions/UserActions\";\nimport TodosAndPosts from \"./TodosAndPosts\";\nimport UsersList from \"./UsersList\";\nimport AddUser from \"./AddUser\";\nimport \"./css/Main.css\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { filterString: \"\" };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = async () => {\n    this.props.fetchUsers();\n  };\n\n  setFilter = (e) => {\n    this.setState({ filterString: e.target.value });\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"usersContainer\">\n          <div className=\"searchContainer\">\n            <label htmlFor=\"search\">Search :</label>{\" \"}\n            <input type=\"text\" id=\"search\" onChange={this.setFilter} />\n            <Link to=\"/AddUser\">\n              <input type=\"button\" value=\"Add\" className=\"btn btn-warning\" />\n            </Link>\n          </div>\n          <UsersList filterString={this.state.filterString} />\n        </div>\n        <Switch>\n          <Route path=\"/TodosAndPosts\" component={TodosAndPosts} />\n          <Route path=\"/AddUser\" component={AddUser} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUsers: () => dispatch(UserActions.fetchUsers()),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Main);\n","import React from \"react\";\nimport Main from \"./components/Main\";\nimport \"./components/css/global.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import types from \"../actions/Types\";\n\nconst INITIAL_STATE = {\n  users: [],\n  loading: false,\n  error: null,\n  filterString: \"\",\n  selectedUserId: \"\",\n  nextId: 0,\n};\n\nconst mainReducer = (state = INITIAL_STATE, action) => {\n  let users;\n  switch (action.type) {\n    case types.FETCH_USERS:\n    case types.ADD_USER:\n    case types.UPDATE_USER:\n    case types.DELETE_USER:\n      return { ...state, loading: true };\n\n    case types.FETCH_USERS_SUCCESS:\n      const nextId = Math.max(...action.payload.map((user) => user.id)) + 1;\n      return { ...state, loading: false, users: action.payload, nextId };\n\n    case types.ADD_USER_SUCCESS:\n      users = [...state.users, action.payload];\n      return { ...state, users, loading: false, nextId: state.nextId + 1 };\n\n    case types.UPDATE_USER_SUCCESS:\n      users = state.users.map((user) => {\n        if (user.id === action.payload.id) {\n          return action.payload;\n        }\n        return user;\n      });\n      return { ...state, loading: false, users };\n\n    case types.DELETE_USER_SUCCESS:\n      users = state.users.filter((user) => user.id !== action.payload);\n      return { ...state, loading: false, users };\n\n    case types.ADD_USER_FAILURE:\n    case types.FETCH_USERS_FAILURE:\n    case types.UPDATE_USER_FAILURE:\n    case types.DELETE_USER_FAILURE:\n      return { ...state, loading: false, error: action.payload };\n\n    case types.SELECT_USER:\n      return { ...state, selectedUserId: action.payload };\n    default:\n      return state;\n  }\n};\nexport default mainReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport mainReducer from \"./appReducer\";\n\nexport default createStore(\n  mainReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport appStore from \"./redux\";\n\nReactDOM.render(\n  <Provider store={appStore}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}